readBin(con, "raw", n = 3)
}
lines <- readLines(con, encoding = "UTF-8")
close(con)
lines
}
preprocessPlexosData_module = file.path("src", "data", "preprocessPlexosData.R")
source(preprocessPlexosData_module)
# Pour l'instant, copier-coller de addNodes, à modifier
library(tidyr)
# arf, point de vocabulaire :
# dans plexos, node et line
# dans antares, zone/area et link
# ce serait bien d'uniformiser dans l'absolu
getAllLines <- function() {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
)
return(lines_tbl)
}
# lines_tbl <- getAllLines()
# print(lines_tbl)
getLinesFromNodes <- function(nodes) {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
filter(child_object %in% nodes) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
) %>%
drop_na()
}
# nodes_test <- c("EU-CHE", "EU-DEU", "EU-FRA")
nodes_test <- c("EU-FRA", "EU-GBR", "EU-DEU", "EU-ITA", "EU-ESP")
lines_test <- getLinesFromNodes(nodes_test)
print(lines_test)
addNTCsToLines <- function(lines_tbl) {
ntc_tbl <- getTableFromPlexos(PROPERTIES_PATH) %>%
filter(collection == "Lines") %>%
select(child_object, property, value) %>%
pivot_wider(names_from = property, values_from = value) %>%
mutate(
line = child_object,
direct_ntc = `Max Flow`,
indirect_ntc = -`Min Flow`
) %>%
select(line, direct_ntc, indirect_ntc)
lines_tbl <- lines_tbl %>%
left_join(ntc_tbl, by = "line")
return(lines_tbl)
}
lines_tbl <- addNTCsToLines(lines_tbl)
print(lines_tbl)
addLinesToAntares <- function(nodes,
log_verbose,
console_verbose,
fullLog_file,
errorsLog_file
) {
#lines_tbl <-
# ah, mais ne faudrait-il donc pas filtrer selon les nodes là ?
# (est-ce qu'une astuce de fou furieux ca serait pas de filtrer selon node in nodes
# dans... le node_from node_to avant même de faire le pivot_wider !
# je crois bien du coup que mathématiquement il reste que du bon...)
}
# addNodesToAntares <- function(nodes,
#                               scaling_factor,
#                               log_verbose,
#                               console_verbose,
#                               fullLog_file,
#                               errorsLog_file
# ) {
#   nodes_tbl <- getNodesTable(nodes)
#   nodes_tbl <- addLatLonToNodes(nodes_tbl)
#   nodes_tbl <- addAntaresColorToNodes(nodes_tbl)
#   for (row in 1:nrow(nodes_tbl)) {
#     area_name = nodes_tbl$node[row]
#     area_lat = nodes_tbl$lat[row]
#     area_lon = nodes_tbl$lon[row]
#     area_color = nodes_tbl$antares_color[row]
#
#     x = area_lon * scaling_factor
#     y = area_lat * scaling_factor
#
#     message = paste(Sys.time(),"- Adding", area_name, "node...\n")
#     log_message(message, fullLog_file, console_verbose)
#     tryCatch({
#       createArea(
#         name = area_name,
#         color = area_color,
#         localization = c(x, y)
#       )
#     }, error = function(e) {
#       error_message = paste(Sys.time(), "- ERROR: could not create node", area_name, "- skipping and continuing...\n")
#       log_message(error_message, fullLog_file)
#       log_message(error_message, errorsLog_file, FALSE)
#     })
#
#
#   }
# }
print(lines_tbl)
preprocessPlexosData_module = file.path("src", "data", "preprocessPlexosData.R")
source(preprocessPlexosData_module)
# Pour l'instant, copier-coller de addNodes, à modifier
library(tidyr)
# arf, point de vocabulaire :
# dans plexos, node et line
# dans antares, zone/area et link
# ce serait bien d'uniformiser dans l'absolu
getAllLines <- function() {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
)
return(lines_tbl)
}
# lines_tbl <- getAllLines()
# print(lines_tbl)
getLinesFromNodes <- function(nodes) {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
filter(child_object %in% nodes) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
) %>%
drop_na()
}
# nodes_test <- c("EU-CHE", "EU-DEU", "EU-FRA")
nodes_test <- c("EU-FRA", "EU-GBR", "EU-DEU", "EU-ITA", "EU-ESP")
lines_test <- getLinesFromNodes(nodes_test)
print(lines_test)
addNTCsToLines <- function(lines_tbl) {
ntc_tbl <- getTableFromPlexos(PROPERTIES_PATH) %>%
filter(collection == "Lines") %>%
select(child_object, property, value) %>%
pivot_wider(names_from = property, values_from = value) %>%
mutate(
line = child_object,
direct_ntc = `Max Flow`,
indirect_ntc = -`Min Flow`
) %>%
select(line, direct_ntc, indirect_ntc)
lines_tbl <- lines_tbl %>%
left_join(ntc_tbl, by = "line")
return(lines_tbl)
}
lines_tbl <- addNTCsToLines(lines_tbl)
print(lines_tbl)
addLinesToAntares <- function(nodes,
log_verbose,
console_verbose,
fullLog_file,
errorsLog_file
) {
#lines_tbl <-
# ah, mais ne faudrait-il donc pas filtrer selon les nodes là ?
# (est-ce qu'une astuce de fou furieux ca serait pas de filtrer selon node in nodes
# dans... le node_from node_to avant même de faire le pivot_wider !
# je crois bien du coup que mathématiquement il reste que du bon...)
}
# addNodesToAntares <- function(nodes,
#                               scaling_factor,
#                               log_verbose,
#                               console_verbose,
#                               fullLog_file,
#                               errorsLog_file
# ) {
#   nodes_tbl <- getNodesTable(nodes)
#   nodes_tbl <- addLatLonToNodes(nodes_tbl)
#   nodes_tbl <- addAntaresColorToNodes(nodes_tbl)
#   for (row in 1:nrow(nodes_tbl)) {
#     area_name = nodes_tbl$node[row]
#     area_lat = nodes_tbl$lat[row]
#     area_lon = nodes_tbl$lon[row]
#     area_color = nodes_tbl$antares_color[row]
#
#     x = area_lon * scaling_factor
#     y = area_lat * scaling_factor
#
#     message = paste(Sys.time(),"- Adding", area_name, "node...\n")
#     log_message(message, fullLog_file, console_verbose)
#     tryCatch({
#       createArea(
#         name = area_name,
#         color = area_color,
#         localization = c(x, y)
#       )
#     }, error = function(e) {
#       error_message = paste(Sys.time(), "- ERROR: could not create node", area_name, "- skipping and continuing...\n")
#       log_message(error_message, fullLog_file)
#       log_message(error_message, errorsLog_file, FALSE)
#     })
#
#
#   }
# }
preprocessPlexosData_module = file.path("src", "data", "preprocessPlexosData.R")
source(preprocessPlexosData_module)
# Pour l'instant, copier-coller de addNodes, à modifier
library(tidyr)
# arf, point de vocabulaire :
# dans plexos, node et line
# dans antares, zone/area et link
# ce serait bien d'uniformiser dans l'absolu
getAllLines <- function() {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
)
return(lines_tbl)
}
# lines_tbl <- getAllLines()
# print(lines_tbl)
getLinesFromNodes <- function(nodes) {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
filter(child_object %in% nodes) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
) %>%
drop_na()
}
# nodes_test <- c("EU-CHE", "EU-DEU", "EU-FRA")
nodes_test <- c("EU-FRA", "EU-GBR", "EU-DEU", "EU-ITA", "EU-ESP")
lines_test <- getLinesFromNodes(nodes_test)
print(lines_test)
addNTCsToLines <- function(lines_tbl) {
ntc_tbl <- getTableFromPlexos(PROPERTIES_PATH) %>%
filter(collection == "Lines") %>%
select(child_object, property, value) %>%
pivot_wider(names_from = property, values_from = value) %>%
mutate(
line = child_object,
direct_ntc = `Max Flow`,
indirect_ntc = -`Min Flow`
) %>%
select(line, direct_ntc, indirect_ntc)
lines_tbl <- lines_tbl %>%
left_join(ntc_tbl, by = "line")
return(lines_tbl)
}
lines_test <- addNTCsToLines(lines_test)
print(lines_test)
addLinesToAntares <- function(nodes,
log_verbose,
console_verbose,
fullLog_file,
errorsLog_file
) {
#lines_tbl <-
# ah, mais ne faudrait-il donc pas filtrer selon les nodes là ?
# (est-ce qu'une astuce de fou furieux ca serait pas de filtrer selon node in nodes
# dans... le node_from node_to avant même de faire le pivot_wider !
# je crois bien du coup que mathématiquement il reste que du bon...)
}
# addNodesToAntares <- function(nodes,
#                               scaling_factor,
#                               log_verbose,
#                               console_verbose,
#                               fullLog_file,
#                               errorsLog_file
# ) {
#   nodes_tbl <- getNodesTable(nodes)
#   nodes_tbl <- addLatLonToNodes(nodes_tbl)
#   nodes_tbl <- addAntaresColorToNodes(nodes_tbl)
#   for (row in 1:nrow(nodes_tbl)) {
#     area_name = nodes_tbl$node[row]
#     area_lat = nodes_tbl$lat[row]
#     area_lon = nodes_tbl$lon[row]
#     area_color = nodes_tbl$antares_color[row]
#
#     x = area_lon * scaling_factor
#     y = area_lat * scaling_factor
#
#     message = paste(Sys.time(),"- Adding", area_name, "node...\n")
#     log_message(message, fullLog_file, console_verbose)
#     tryCatch({
#       createArea(
#         name = area_name,
#         color = area_color,
#         localization = c(x, y)
#       )
#     }, error = function(e) {
#       error_message = paste(Sys.time(), "- ERROR: could not create node", area_name, "- skipping and continuing...\n")
#       log_message(error_message, fullLog_file)
#       log_message(error_message, errorsLog_file, FALSE)
#     })
#
#
#   }
# }
preprocessPlexosData_module = file.path("src", "data", "preprocessPlexosData.R")
source(preprocessPlexosData_module)
# Pour l'instant, copier-coller de addNodes, à modifier
library(tidyr)
# arf, point de vocabulaire :
# dans plexos, node et line
# dans antares, zone/area et link
# ce serait bien d'uniformiser dans l'absolu
getAllLines <- function() {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
)
return(lines_tbl)
}
# lines_tbl <- getAllLines()
# print(lines_tbl)
getLinesFromNodes <- function(nodes) {
lines_tbl <- getTableFromPlexos(MEMBERSHIPS_PATH) %>%
filter(parent_class == "Line") %>%
select(parent_object, collection, child_object) %>%
filter(child_object %in% nodes) %>%
pivot_wider(names_from = collection, values_from = child_object) %>%
rename(
line = parent_object,
node_from = "Node From",
node_to = "Node To"
) %>%
drop_na()
}
# nodes_test <- c("EU-CHE", "EU-DEU", "EU-FRA")
nodes_test <- c("EU-FRA", "EU-GBR", "EU-DEU", "EU-ITA", "EU-ESP")
lines_test <- getLinesFromNodes(nodes_test)
print(lines_test)
addNTCsToLines <- function(lines_tbl) {
ntc_tbl <- getTableFromPlexos(PROPERTIES_PATH) %>%
filter(collection == "Lines") %>%
select(child_object, property, value) %>%
pivot_wider(names_from = property, values_from = value) %>%
mutate(
line = child_object,
direct_ntc = `Max Flow`,
indirect_ntc = -`Min Flow`
) %>%
select(line, direct_ntc, indirect_ntc)
lines_tbl <- lines_tbl %>%
left_join(ntc_tbl, by = "line")
return(lines_tbl)
}
lines_test <- addNTCsToLines(lines_test)
print(lines_test)
addLinesToAntares <- function(nodes,
log_verbose,
console_verbose,
fullLog_file,
errorsLog_file
) {
#lines_tbl <-
# ah, mais ne faudrait-il donc pas filtrer selon les nodes là ?
# (est-ce qu'une astuce de fou furieux ca serait pas de filtrer selon node in nodes
# dans... le node_from node_to avant même de faire le pivot_wider !
# je crois bien du coup que mathématiquement il reste que du bon...)
}
# addNodesToAntares <- function(nodes,
#                               scaling_factor,
#                               log_verbose,
#                               console_verbose,
#                               fullLog_file,
#                               errorsLog_file
# ) {
#   nodes_tbl <- getNodesTable(nodes)
#   nodes_tbl <- addLatLonToNodes(nodes_tbl)
#   nodes_tbl <- addAntaresColorToNodes(nodes_tbl)
#   for (row in 1:nrow(nodes_tbl)) {
#     area_name = nodes_tbl$node[row]
#     area_lat = nodes_tbl$lat[row]
#     area_lon = nodes_tbl$lon[row]
#     area_color = nodes_tbl$antares_color[row]
#
#     x = area_lon * scaling_factor
#     y = area_lat * scaling_factor
#
#     message = paste(Sys.time(),"- Adding", area_name, "node...\n")
#     log_message(message, fullLog_file, console_verbose)
#     tryCatch({
#       createArea(
#         name = area_name,
#         color = area_color,
#         localization = c(x, y)
#       )
#     }, error = function(e) {
#       error_message = paste(Sys.time(), "- ERROR: could not create node", area_name, "- skipping and continuing...\n")
#       log_message(error_message, fullLog_file)
#       log_message(error_message, errorsLog_file, FALSE)
#     })
#
#
#   }
# }
gc()
## Script principal regroupant le coeur du processus ##
## Les objets sont typiquement déjà définis dans les fichiers auxilliaires
# Charger les packages
library(antaresRead)
library(antaresEditObject)
# Demander d'ailleurs si on peut virer "antares" du Gitignore
# pour démocratiser AntaresWeb (mais vu que c'est Nicolas qui me l'a filé...)
# Importer des fonctions et variables auxilliaires créées dans d'autres scripts
source(".\\src\\antaresFunctions.R")
addNodes_module = file.path("src", "data", "addNodes.R")
source(addNodes_module)
## Création d'une nouvelle étude
study_name <- generateName(study_basename)
createStudy(
path = base_path,
study_name = study_name,
antares_version = antares_version
)
log_verbose = LOG_VERBOSE
console_verbose = CONSOLE_VERBOSE
if (log_verbose) {
message = paste(Sys.time(),"- Creating", study_name, "study...\n")
log_message(message, fullLog_file, console_verbose)
}
updateAllSettings()
scaling_factor <- 25
# Initiate log files
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M_%S")
log_instance_folder <- paste0(".\\logs\\", timestamp)
if (!dir.exists(log_instance_folder)) {
dir.create(log_instance_folder)
}
fullLog_file <- file.path(log_instance_folder, "full.txt")
errorsLog_file <- file.path(log_instance_folder, "errors.txt")
nodes <- NODES
cat("Adding nodes...\n")
addNodesToAntares(nodes,
scaling_factor,
log_verbose,
console_verbose,
fullLog_file,
errorsLog_file
)
cat("Done adding nodes!\n")
####################################################
if (GENERATE_LOAD) {
source(".\\src\\data\\importLoad.R")
addLoadToNodes(nodes = nodes,
log_verbose = LOG_VERBOSE,
console_verbose = CONSOLE_VERBOSE,
fullLog_file = fullLog_file,
errorsLog_file = errorsLog_file
)
}
cat("Done adding load data!\n")
preprocessPlexosData_module = file.path("src", "data", "preprocessPlexosData.R")
source(preprocessPlexosData_module)
generators_tbl <- getGeneratorsFromNodes(nodes)
generators_tbl <- filterFor2015(generators_tbl)
generators_tbl <- addGeneralFuelInfo(generators_tbl)
if (GENERATE_WIND) {
if (RENEWABLE_GENERATION_MODELLING == "aggregated") {
importWind_module = file.path("src", "data", "importWind.R")
source(importWind_module)
addAggregatedWind(nodes, generators_tbl, log_verbose, console_verbose, fullLog_file, errorsLog_file)
message = paste(Sys.time(), "- [MAIN] Added wind !")
log_message(message, fullLog_file, console_verbose)
}
}
# Y a quand même des trucs aberrants genre comment ça y a pas de solaire au Maroc ?
# Dans le Ninja il y a pas que du capacity scaler il y a même plusieurs centrales, mais pas dans le Plexos.
# Et donc impossible d'avoir la capacité nominale...
if (GENERATE_SOLAR_PV) {
if (RENEWABLE_GENERATION_MODELLING == "aggregated") {
importSolarPV_module = file.path("src", "data", "importSolarPV.R")
source(importSolarPV_module)
addAggregatedSolarPV(nodes, generators_tbl, log_verbose, console_verbose, fullLog_file, errorsLog_file)
message = paste(Sys.time(), "- [MAIN] Added solar PV !")
log_message(message, fullLog_file, console_verbose)
}
}
if (GENERATE_LINES) {
addLines_module = file.path("src", "data", "addLines.R")
source(addLines_module)
addLinesToAntares(nodes, INCLUDE_ZERO_NTC_LINES, log_verbose, console_verbose, fullLog_file, errorsLog_file)
message = paste(Sys.time(), "- [MAIN] Done adding lines !")
log_message(message, fullLog_file, console_verbose)
}
